pipeline {
    agent {
        label 'fonetwish'
    }
    stages {
        stage('Maven Clean Install') {
            when {
		        anyOf {
			        branch 'feature'; branch 'develop'; branch 'main'
		        }
            } 	
            steps {
                powershell 'mvn clean install'
            }
        }
        stage('Maven Test') {
            when {
		        anyOf {
			        branch 'feature'; branch 'develop'; branch 'main'
		        }
            } 	
            steps {
                powershell 'mvn test'
            }
        }
        stage('Build and scan Docker Image') {
	        when {
		        anyOf {
			        branch 'develop'; branch 'main'
	            }
            }
            steps {
                powershell '''
					$IMAGE="dev-promotion-assessment"
					$NOW=Get-Date -Format "%y%M%d"
					$BUILD="${env:BUILD_NUMBER}"
					$TAG="$($NOW).$($BUILD)"
					docker build -t ${IMAGE}:${TAG} .
					docker images
                    docker pull aquasec/trivy:latest
                    $var = "C:\\Users\\azureuser"
                    docker run --rm -v ${var}/tmp:/root/.cache/ -v //var/run/docker.sock:/var/run/docker.sock  aquasec/trivy:latest image ${IMAGE}:${TAG} --light --format json
				'''
            }
        }
        stage('Push Docker Image') {
	        when {
		        anyOf {
			        branch 'develop'; branch 'main'
	            }
            }
            steps {
                input message: 'Please click proceed if the docker image scan looks good else click abort'
                withCredentials([usernamePassword(credentialsId: 'docker-cred', passwordVariable: 'TOKEN', usernameVariable: 'USERNAME')]) {
                    powershell '''
						$IMAGE="dev-promotion-assessment"
						$NOW=Get-Date -Format "%y%M%d"
						$BUILD="${env:BUILD_NUMBER}"
						$TAG="$($NOW).$($BUILD)"
						$ACR_LOGINSERVER="kabirajdemoacr.azurecr.io"
						docker login ${ACR_LOGINSERVER} --username ${env:USERNAME} --password ${env:TOKEN}
                        docker tag ${IMAGE}:${TAG} ${ACR_LOGINSERVER}/${IMAGE}:${TAG}
						docker push ${ACR_LOGINSERVER}/${IMAGE}:${TAG}
					'''
                }
            }
        }
        stage('Deploy to AKS') {
	        when {
		        anyOf {
			        branch 'develop'; branch 'main'
	            }
            }
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-file', variable: 'filepath')]) {
                    powershell '''
						$NOW=Get-Date -Format "%y%M%d"
						$BUILD="${env:BUILD_NUMBER}"
						$TAG="$($NOW).$($BUILD)"
                        $env:KUBECONFIG="$filepath"
                        C:\\"Program Files"\\Helm\\windows-amd64\\helm version
                        C:\\"Program Files"\\Helm\\windows-amd64\\helm upgrade --install pet-clinic pet-clinic --set image.tag=$TAG
					'''
                }
            }
        }
    }
}
